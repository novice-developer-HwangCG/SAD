디스플레이만 만들어 놓음
통신 코드 설정 X
실행 파일 생성 X

현재 SAD용 pico없음 pico 하나 더 받아서 테스트하거나 해야 함

점검장비(Jetson 활용 Display)

 - 테스트 할 시 유의 사항
※ 파일 실행 할 시 sudo 를 꼭 써줘야 함
※ ser = serial.Serial('/dev/ttyTHS1', 115200, timeout=1) -> 젯슨 나노에서 테스트할 시 /dev/ttyTHS1 타겟은 /dev/ttyTHS0 으로 바꿔야 함
※ 아래 코드 5줄의 파일 경로 위치 변경 해야 함
self.on_image = tk.PhotoImage(file="/home/jetpack/Desktop/sad_test/toggle_on.png")
self.off_image = tk.PhotoImage(file="/home/jetpack/Desktop/sad_test/toggle_off.png")
self.diar_on_image = tk.PhotoImage(file="/home/jetpack/Desktop/sad_test/diar_sw1_1.png")
self.diar_off_image = tk.PhotoImage(file="/home/jetpack/Desktop/sad_test/diar_sw2_1.png")

 - 젯슨과 피코 시리얼 포트 연결 115200, 송수신 및 GND 연결
pin TX - pico GP0 (핀 1) <-> Jetson Nano 핀 10 (RX)
pin RX - pico GP1 (핀 2) <-> Jetson Nano 핀 8 (TX)
pin GND - pico 3, 8, 13 등 <-> Jetson Nano 핀 6 (GND)

 - 피코 ADC 핀 측정
pico에 업로드된 코드에 ADC pin 28번 일 경우
3.3V 측정 - GP28_ADC2 (고정, Pin 34) <-> 3V3 (Pin 36) [ADC_VREF 위]
0V 측정 - GP28_ADC2 (고정, Pin 34) <-> GND (Pin 23) [GP17 위]

- y1 = 175 - self.volt_values[i] * 10
*10의 의미는 전압 값을 그래프 캔버스의 픽셀 단위로 확대하여 시각적으로 더 잘 보이게 하기 위함


0905 문제
디지털 신호 그래프 안 그려짐 
-> 수평선 그래프로 밖에 출력이 안됨


수정 후 문제

1. 0905 1차 수정 및 문제
-> 디지털 신호 그래프로 그려진 것 같으나 지속적인 HIGH 신호의 변화가 없음
-> FIRE 를 누를 시 이전에 그려졌던 신호 그래프가 초기화가 되버림
-> 신호 사이의 간격이 너무 좁아서 신호가 어떤 형태인지 제대로 보이지 않음

2. 코드 개선
A. 지속적인 신호 변화를 알아 볼 수 있게 while문 사용 
(예시. 초기 신호 값은 0으로 출력 ARM_1 이 on이 되면 1의 값을 지속적으로 전달 - 실시간 그래프)
B. 신호 사이의 간격을 10으로 주어서 신호가 어떤 형태로 나오는지 확인할 수 있도록 변경

─────────────────────────────────────────────────────────

1. 0906 2차 수정 및 문제
-> FIRE 를 누룰 시 이전에 그려졌던 신호 그래프가 초기화가 되버림 (1차 수정 문제와 동일)
-> 0 값은 지속적으로 변화하는 것이 되는데 1은 안됨 -> while문 말고 after를 사용함
-> 신호 그래프 선이 캔버스 끝까지 그려지지 않음

2. 코드 개선
A. 1 값도 지속적으로 변화 할 수 있도록 수정 
B. FIRE 버튼 누를 시 신호 그래프 초기화 하지 말도록 수정
C. FIRE 버튼 누를 시 OFF랑 색 바뀌지 않는 거 수정
D. 신호 그래프 선이 끝까지 그려질 수 있도록 수정

─────────────────────────────────────────────────────────

1. 0906 3차 수정 및 문제
-> FIRE 버튼 TEXT, COLOR 문제 및 신호 그래프 초기화 하지 않도록 수정 완
-> 신호 그래프 값 1일 때 지속적으로 변화하지 않는 문제 남음
-> 신호 그래프 선 끝까지 그려지지 않는 문제 남음
-> FIRE 가 ON 상태인데 ARM 버튼을 ON으로 조작 될 수 있는 문제

2. 코드 개선
A. 1 값도 지속적으로 변화 할 수 있도록 수정

3. 개선 후 추가해야 할 일 
※ ARM_ 버튼들 누를 때마다 디지털 신호 HIGH, LOW 글씨 변화
※ 순차 제어로 ARM_1이 off 일 때 ARM_2와 ARM_3가 눌려지지 않도록 해놨는데 ARM_1,ARM_2,ARM_3가 모두 on 상태에서 ARM_2 off
   해버리면 ARM_3는 on 상태로 남아있는 문제가 있음 이를 위한 오입력 방지책과 이전 버튼이 off 되면 먹통상태로 진입하거나 이후 버튼도 off하는 코드를 추가해야함

─────────────────────────────────────────────────────────

1. 0906 4차 수정 및 문제 (코드 0906_SAD_function.py)
-> HIGH, LOW 신호 값 수정 완
-> 신호 그래프 선 수정 완
-> ARM_ 버튼들 누를 때마다 디지털 신호 HIGH, LOW 글씨 변화 추가 완
-> 순차 제어로 코드를 짜놔서 FIRE를 누르면 나머지는 초기화로 OFF가 되는데 FIRE는 ON 상태로 남아있음, 심지어 DIAR이 OFF라 눌리지도 않음

2. 코드 개선
A. FIRE 버튼을 누르면 ON 이후 다시 OFF로 돌아오게 수정

3. 개선 후 추가해야 할 일
※ 큰 사각형 위젯에 전압 인가 시 volt 선 그리기 (5V ADC -> +12V)

3-1 코딩 대기
※ 순차 제어로 ARM_1이 off 일 때 ARM_2와 ARM_3가 눌려지지 않도록 해놨는데 ARM_1,ARM_2,ARM_3가 모두 on 상태에서 ARM_2 off
   해버리면 ARM_3는 on 상태로 남아있는 문제가 있음 이를 위한 오입력 방지책과 이전 버튼이 off 되면 먹통상태로 진입하거나 이후 버튼도 off하는 코드를 추가해야함


─────────────────────────────────────────────────────────

1. 0910 5차 수정 및 문제 (코드 0910_SAD_Display.py)
-> FIRE 버튼을 누르면 ON 이후 다시 OFF로 돌아오게 수정
-> 큰 사각형 위젯에 전압 인가 시 volt 선 그리기 (5V ADC -> +12V) -> 현재 랜덤 값 줘서 그래프 그리게 함

2. 코드 개선
A. -

3. 개선 후 추가해야 할 일
※ ARM_3 on 이면 순발 50ms로, off 면 지향 20ms로 출력 -> on이면 20?
※ volt 값 디스플레이 할 수 있도록 수정
※ 버튼 UI 개선

3-1 코딩 대기
※ 순차 제어로 ARM_1이 off 일 때 ARM_2와 ARM_3가 눌려지지 않도록 해놨는데 ARM_1,ARM_2,ARM_3가 모두 on 상태에서 ARM_2 off
   해버리면 ARM_3는 on 상태로 남아있는 문제가 있음 이를 위한 오입력 방지책과 이전 버튼이 off 되면 먹통상태로 진입하거나 이후 버튼도 off하는 코드를 추가해야함


─────────────────────────────────────────────────────────

1. 0912 6차 수정 및 문제 (코드 0912_SAD_Display.py)
-> FIRE 버튼을 누르면 ON 이후 다시 OFF로 돌아오게 수정
-> ARM, DIAR 버튼 UI 변경 -> tkinter 한계 더 좋은 ui를 변경해야할시 pyqt를 써야 할 가능성

2. 코드 개선
A. 큰 사각형 위젯에 전압 인가 시 volt 선 그리기 (5V ADC -> +12V) -> 현재 랜덤 값 줘서 그래프 그리게 하기

3. 개선 후 추가해야 할 일
※ ARM_3 on 이면 순발 50ms로, off 면 지향 20ms로 출력 -> on이면 20?
※ volt 값 디스플레이 할 수 있도록 수정

3-1 코딩 대기
※ 순차 제어로 ARM_1이 off 일 때 ARM_2와 ARM_3가 눌려지지 않도록 해놨는데 ARM_1,ARM_2,ARM_3가 모두 on 상태에서 ARM_2 off
   해버리면 ARM_3는 on 상태로 남아있는 문제가 있음 이를 위한 오입력 방지책과 이전 버튼이 off 되면 먹통상태로 진입하거나 이후 버튼도 off하는 코드를 추가해야함

※ volt 값 디스플레이 -> 외부 전압을 측정 할 수 있는 하드웨어 인터페이스와 이를 처리할 수 있는 소프트웨어가 필요
   젯슨 나노는 직접적으로 전압을 측정하는 기능을 제공하지 않음

   젯슨 나노는 디지털 신호를 처리하는데 특화, 아날로그 전압 신호를 디지털로 변환하려면 ADC(Analog-to-Digital Converter)모듈이 필요
   일반적으로 많이 사용되는 ADC 모듈로는 MCP3008등이 있음
   MCP3008 - 젯슨 나노와 SPI 통신을 통해 데이터를 주고 받을 수 있으며, 최대 8채널의 아날로그 입력을 지원

   if MCP3008 사용 시
   젯슨 나노에 공급되는 전압이 12V이므로, MCP3008과 같은 ADC는 최대 입력 전압이 3.3V 또는 5V로 제한
   따라서, 전압 분배기 회로를 사용해 전압을 안전한 범위로 낮춰줘야 함

   전압 분배기까지 마치면 spidev 라이브러리를 이용 젯슨 나노와 MCP3008 사이의 SPI통신을 처리


─────────────────────────────────────────────────────────

1. 0913 7차 수정 및 문제 (코드 0913_SAD_Display.py)
-> -

2. 코드 개선
   A. 스위치 UI를 실제 레버 버튼 이미지로 교체 희망, FIRE 이미지는 좀 특별한 걸로 대체
   B. 현재 볼트 값을 출력하는 사각형이 너무 큼 사각형도 줄여야함 -> 실제 라즈베리파이 dispaly에서 해당 UI 창이 모두 보여야 함
   C. falut() 상태에 진입 했을 때 UI창에서 볼 수 있도록 falut()라는 글씨를 추가하던 뭐든 추가 요청
   D. 스위치 버튼들 사이 좀 더 넓히기

3. 개선 후 추가해야 할 일
※ ARM_3 버튼은 2개를 만든 후 하나는 순발 20ms, 하나는 지연 50ms로 출력할 수 있게 변경 (ex. 순발 20ms 상태에서 ARM_3 버튼을 on 하면 순발 디지털 신호 그래프는 20ms로 그래프를 그림, 지연 50ms도 동일)
※ 전체적인 UI는 그림판에서 확인

3-1 코딩 대기
※ 순차 제어로 ARM_1이 off 일 때 ARM_2와 ARM_3가 눌려지지 않도록 해놨는데 ARM_1,ARM_2,ARM_3가 모두 on 상태에서 ARM_2 off
   해버리면 ARM_3는 on 상태로 남아있는 문제가 있음 이를 위한 오입력 방지책과 이전 버튼이 off 되면 먹통상태로 진입하거나 이후 버튼도 off하는 코드를 추가해야함

※ volt 값 디스플레이 -> 이게 MCU에서 ADC 값을 받아와서 volt값으로 바꾼 후 몇 볼트값이 전달 되는지를 그리는 건지 뭔지를 이해 못했음


─────────────────────────────────────────────────────────

1. 0919 8차 수정 및 문제 (코드 0919_SAD_Display.py)
-> 스위치 UI를 실제 레버 버튼 이미지로 교체 및 사이를 넓혔으나 FIRE 토글 스위치 ui 이미지는 아직 찾아야 함
-> 현재 볼트 값을 출력하는 사각형을 줄였으나 실제 라즈베리파이 dispaly에서 해당 창이 모두 보이는지 확인 해봐야 함
-> ARM_3 스위치에 순발, 지연을 추가했으나 신호 그래프 데이터를 배열 형식으로 짜놔서 0->1->0->1->... 이렇게 하나씩 그리는게 하니라 0,1->0,1->... 이렇게 그려져서 수정 필요 가능성 有
-> 큰 사각형에 volt 선 그릴 준비 해야함

2. 코드 개선
   A. falut() 상태에 진입 했을 때 UI창에서 볼 수 있도록 falut()라는 글씨를 추가하던 뭐든 추가 요청
   B. DIAR과 FIRE 위치 변경 -> 버튼 변경이 아닌 라벨만 변경

3. 개선 후 추가해야 할 일
※ ARM_3 버튼은 2개를 만든 후 하나는 순발 20ms, 하나는 지연 50ms로 출력할 수 있게 변경 (ex. 순발 20ms 상태에서 ARM_3 버튼을 on 하면 순발 디지털 신호 그래프는 20ms로 그래프를 그림, 지연 50ms도 동일)
※ 전체적인 UI는 그림판에서 확인

3-1 코딩 대기
※ 순차 제어로 ARM_1이 off 일 때 ARM_2와 ARM_3가 눌려지지 않도록 해놨는데 ARM_1,ARM_2,ARM_3가 모두 on 상태에서 ARM_2 off
   해버리면 ARM_3는 on 상태로 남아있는 문제가 있음 이를 위한 오입력 방지책과 이전 버튼이 off 되면 먹통상태로 진입하거나 이후 버튼도 off하는 코드를 추가해야함

※ volt 값 디스플레이 -> 이게 MCU에서 ADC 값을 받아와서 volt값으로 바꾼 후 몇 볼트값이 전달 되는지를 그리는 건지 뭔지를 이해 못했음


─────────────────────────────────────────────────────────

1. 0920 9차 수정 및 문제 (코드 0920_SAD_Display.py)
-> 실제 라즈베리파이 dispaly에서 해당 창이 모두 보이는지 확인 결과 디스플레이 화면에서 글씨들이 ui와 겹치는 현상 및 세로 길이가 짤려서 보임 -> 수정 완
-> ARM_3 순발, 지연에 대한 신호 그래프 데이터 -> Display는 그냥 보여 주기용이라 실제는 다르니 상관 없을 듯함
-> 큰 사각형에 volt 선을 그렸는데 전압값이 낮게 나오며 통신 문제인지 그래프를 빠르게 그리지 못함 않음

2. 코드 개선
   A. falut() 상태에 진입 했을 때 UI창에서 볼 수 있도록 falut()라는 글씨를 추가하던 뭐든 추가 요청
   B. DIAR과 FIRE 위치 변경 -> 버튼 변경이 아닌 라벨만 변경

3. 개선 후 추가해야 할 일
※ FIRE 토글 스위치 ui 이미지

3-1 코딩 대기
※ 순차 제어로 ARM_1이 off 일 때 ARM_2와 ARM_3가 눌려지지 않도록 해놨는데 ARM_1,ARM_2,ARM_3가 모두 on 상태에서 ARM_2 off
   해버리면 ARM_3는 on 상태로 남아있는 문제가 있음 이를 위한 오입력 방지책과 이전 버튼이 off 되면 먹통상태로 진입하거나 이후 버튼도 off하는 코드를 추가해야함


───────────────────────────────────────────────────────── 코딩 궁금점 ─────────────────────────────────────────────────────────

- 아두이노 코드에선 4번 스위치가 솔레노이드 전원 재공급 후 차단 및 모터 원 위치 복귀인데 해당 코드에서는 'FIRE' 즉 스위치 5번 인데 맞는지 의문
해결 -> 코드에서 FIRE가 솔레노이즈 전원 재공급 및 모터 원 위치 복귀가 맞음 즉 아두이노 SAD 코드에서 스위치 5번도 사용하게끔 하여 스위치 5번이 솔레노이드 전원 재공급 후 차단 및 모터 원 위치 복귀로 바꿀 것

- 아두이노 코드에서 순차 제어로 1->2->3->4 이지만 해당 코드에선 'FIRE' 가 순차 제어에 포함이 안되어 있음 포함 해야하는지 의문
해결 -> FIRE도 순차 제어에 포함 해야함 안그러면 오작동 일으킬 수 있음

- 아두이노 코드에서 스위치 오입력 시 falut()로 빠지게 되는데 해당 코드에서도 falut() 상태를 추가해서 만들어야 하는지 의문
해결 -> falut() 추가 해야함 또한 dispaly에서 Falut() 상태가 되었음을 화면으로 보여주었으면 함


─────────────────────────────────────────────────────────


1. 0923 10차 수정 및 문제 (코드 0923_SAD_Display.py, 0923_SAD_test_pc.py)
-> 젯슨에서 사용할 파일과 pc에서 테스트할 파일 두개로 나눔 adc값 측정 및 통신을 빼고 추가 수정 및 테스트할 파일은 0923_SAD_test_pc.py을 사용
-> 젯슨에서 사용할 파일은 0923_SAD_Display.py을 사용
-> try_TEST.py와 try_TEST_backup.py는 각각 pc 테스트, 젯슨 테스트 파일임 try_TEST.py = 0923_SAD_Display.py / try_TEST_backup.py = 0923_SAD_test_pc.py
-> DIAR과 FIRE 라벨 위치 변경 및 기능은 그대로 두었음 이제 DIAR 버튼을 누를 시 모든 스위치 초기화
-> falut() 상태를 표기하는 글씨를 제거함 대신 각 버튼이 오입력이 되지 않도록 방지 해놓음 또한 기존 falut() 라벨 위치에 ADC 전압 값을 출력하게 함

2. 코드 개선
   A. FIRE 토글 스위치 ui 이미지
   B. 휴대용 모니터 화면 Display에 맞춰서 UI 창을 더 크게 늘려야 함

3. 개선 후 추가해야 할 일
※ 

4. 타겟에서 테스트 할 시 유의 사항
※ 파일 실행 할 시 sudo 를 꼭 써줘야 함
※ ser = serial.Serial('/dev/ttyTHS1', 115200, timeout=1) -> 타겟은 /dev/ttyTHS0 으로 바꿔야 함
※ 아래 두 코드의 파일 위치 변경 해야 함
self.on_image = tk.PhotoImage(file="/home/jetpack/Desktop/sad_test/toggle_on.png")
self.off_image = tk.PhotoImage(file="/home/jetpack/Desktop/sad_test/toggle_off.png")


─────────────────────────────────────────────────────────


1. 0924 11차 수정 및 문제 (코드 0924_SAD_Display.py, 0924_SAD_test_pc.py)
-> UI창 크기를 800x440 -> 1855x1030 으로 늘림, 휴대용 모니터 1920x1080에 맞춘 사이즈

2. 코드 개선
   A. FIRE 토글 스위치 ui 이미지
   B. 신호 그래프를 출력하는 UI 사각형에 맞춰 개선

3. 개선 후 추가해야 할 일
※ 

4. 타겟에서 테스트 할 시 유의 사항
※ 파일 실행 할 시 sudo 를 꼭 써줘야 함
※ ser = serial.Serial('/dev/ttyTHS1', 115200, timeout=1) -> 젯슨 나노에서 테스트할 시 /dev/ttyTHS1 타겟은 /dev/ttyTHS0 으로 바꿔야 함
※ 아래 코드 2줄의 파일 경로 위치 변경 해야 함
self.on_image = tk.PhotoImage(file="/home/jetpack/Desktop/sad_test/toggle_on.png")
self.off_image = tk.PhotoImage(file="/home/jetpack/Desktop/sad_test/toggle_off.png")


─────────────────────────────────────────────────────────


1. 0926 12차 수정 및 문제 (코드 0926_SAD_Display.py, 0926_SAD_test_pc.py)
-> DIAR 토글 스위치 ui 이미지를 변경함
-> 신호 그래프를 출력하는 UI 사각형에 맞춰 개선

2. 코드 개선
   A. 현재 Display UI는 모두 pc 해상도에 맞춰 있음 이를 SAD Display 모니터 해상도에 맞춰야 함

3. 개선 후 추가해야 할 일
※ FIAR 버튼이 눌리고 3초 후 DIAR 버튼 활성화 -> 덮개 이미지를 추가할 시 덮개 이미지에서 
   바로 버튼을 눌릴 수 있도록 하는 것보다 덮개 이미지가 열리고 스위치 이미지가 보이게끔 하는게 좋을 것 같다고 판단

4. 테스트 할 시 유의 사항
※ 파일 실행 할 시 sudo 를 꼭 써줘야 함
※ ser = serial.Serial('/dev/ttyTHS1', 115200, timeout=1) -> 젯슨 나노에서 테스트할 시 /dev/ttyTHS1 타겟은 /dev/ttyTHS0 으로 바꿔야 함
※ 아래 코드 4줄의 파일 경로 위치 변경 해야 함
self.on_image = tk.PhotoImage(file="/home/jetpack/Desktop/sad_test/toggle_on2.png")
self.off_image = tk.PhotoImage(file="/home/jetpack/Desktop/sad_test/toggle_off2.png")
self.diar_on_image = tk.PhotoImage(file="/home/jetpack/Desktop/sad_test/diar_sw1.png")
self.diar_off_image = tk.PhotoImage(file="/home/jetpack/Desktop/sad_test/diar_sw2.png")


─────────────────────────────────────────────────────────


1. 0927 13차 수정 및 문제 (코드 0927_SAD_Display.py, 0927_SAD_test_pc.py)
-> DIAR 스위치 덮개 이미지 추가
-> FIAR 버튼이 눌리고 3초 후 DIAR 버튼 활성화 추가

2. 코드 개선
   A. 현재 Display UI는 모두 pc 해상도에 맞춰 있음 이를 SAD Display 모니터 해상도에 맞게 다시 수정해야함 1280x800

3. 개선 후 추가해야 할 일
※ 현재 draw_volt() 그래프가 시리얼 플로터 처럼 나오는지는 미지수 또한 실제 draw_volt() 그래프가 어떻게 그려지는지 확인 후 개선해야함

4. 테스트 할 시 유의 사항
※ 파일 실행 할 시 sudo 를 꼭 써줘야 함
※ ser = serial.Serial('/dev/ttyTHS1', 115200, timeout=1) -> 젯슨 나노에서 테스트할 시 /dev/ttyTHS1 타겟은 /dev/ttyTHS0 으로 바꿔야 함
※ 아래 코드 5줄의 파일 경로 위치 변경 해야 함
self.on_image = tk.PhotoImage(file="/home/jetpack/Desktop/sad_test/toggle_on2.png")
self.off_image = tk.PhotoImage(file="/home/jetpack/Desktop/sad_test/toggle_off2.png")
self.diar_on_image = tk.PhotoImage(file="/home/jetpack/Desktop/sad_test/diar_sw1.png")
self.diar_off_image = tk.PhotoImage(file="/home/jetpack/Desktop/sad_test/diar_sw2.png")
self.diar_sw_cover = tk.PhotoImage(file="/home/jetpack/Desktop/sad_test/diar_sw0.png")

5. 젯슨과 피코 시리얼 포트 연결 115200, 송수신 및 GND 연결
pin TX - pico GP0 (핀 1) <-> Jetson Nano 핀 10 (RX)
pin RX - pico GP1 (핀 2) <-> Jetson Nano 핀 8 (TX)
pin GND - pico 3, 8, 13 등 <-> Jetson Nano 핀 6 (GND)

6. 피코 ADC 핀 측정
pico에 업로드된 코드에 ADC pin 28번 일 경우
3.3V 측정 - GP28_ADC2 (고정, Pin 34) <-> 3V3 (Pin 36) [ADC_VREF 위]
0V 측정 - GP28_ADC2 (고정, Pin 34) <-> GND (Pin 23) [GP17 위]

7. draw_volt 메서드 처리 속도 개선 방법
   1: after() 메서드 호출 주기 줄이기 -> self.root.after(50, self.update_loop)   # 100ms -> 50ms
   2: 줄 수에 따른 최적화 -> if len(self.volt_values) > 20:  self.volt_values.pop(0)   # 50 -> 20
   3: 불필요 요소 삭제 -> 기존에 그렸던 그래프 요소들을 다시 그릴 때 전체를 삭제하고 다시 그리면 비효율적, canvas.delete() 메서드로 
      이전에 그린 그래프를 지우고 새로 그릴 때도 tags를 이용하여 특정 그래프 요소만 삭제하도록 최적화
      -> self.canvas_inside_large.delete("volt_graph")  # 전압 그래프만 삭제
   4: Canvas 업데이트 개선 -> 각 데이터 포인트를 하나씩 그리기보다, 특정 영역을 업데이트하거나 canvas.create_line()을 최소한으로 호출하여 성능을 향상
      대신 draw_volt()에서 각각의 선을 그릴 때, 최대한 효율적으로 처리하는 것이 중요
   5: 시리얼 통신 병목 해결 -> ser = serial.Serial('/dev/ttyTHS1', 115200, timeout=0.1)  # timeout 값을 0.1로 설정 / 1 -> 0.1
   6: 멀티스레딩 -> 그래프 그리는 작업과 시리얼 데이터를 읽는 작업을 분리하면 UI가 더 빠르고 부드럽게 업데이트될 수 있음,
      하나의 스레드는 시리얼 데이터를 처리하고 다른 스레드는 그래프를 그리는 작업을 처리하게 하여, UI 업데이트가 시리얼 통신의 지연에 의존하지 않도록 하기


─────────────────────────────────────────────────────────


1. 0930 14차 수정 및 문제 (코드 0930_SAD_Display.py, 0930_SAD_test_pc.py)
-> 1280x800에 맞춰 UI 창 개선
-> 현재 FIRE 버튼이 on이되면 DIAR 버튼이 덮개 이미지 상태에서 바로 누를 수 있는 문제가 있음

※ SAD ui Display에서 ARM 1 버튼 눌러 on 할 시 값 전달(예시.  off -> 0, on -> 1) -> 젯슨 -> (시리얼 통신) -> pico 
※ pico와 연결(통신?) 되어 있는 다른 MCU에 ARM1 에 대한 HIGH LOW 신호 전달
※ pico 에서 ARM 1, 2, 3 에 대한 핀은 아무거나 (예시. ARM 1 -> pin 6)

# 지금은 MCU에 신호 보내는 것보다 LED를 키는 걸로 테스트 할 것
-> 기존 코드 0930_SAD_Display.py에서 테스트 해봤는데 버튼이 눌리지 않음 pico led에 불 안들어옴
-> 새로 작성한 ARM_1_test.py 는 잘 됨 이유가 뭔지 모르겠음

2. 코드 개선
   A. 

3. 개선 후 추가해야 할 일
※ 현재 draw_volt() 그래프가 시리얼 플로터 처럼 나오는지는 미지수 또한 실제 draw_volt() 그래프가 어떻게 그려지는지 확인 후 개선해야함


4. draw_volt 메서드 처리 속도 개선 방법
   1: after() 메서드 호출 주기 줄이기 -> self.root.after(50, self.update_loop)   # 100ms -> 50ms
   2: 줄 수에 따른 최적화 -> if len(self.volt_values) > 20:  self.volt_values.pop(0)   # 50 -> 20
   3: 불필요 요소 삭제 -> 기존에 그렸던 그래프 요소들을 다시 그릴 때 전체를 삭제하고 다시 그리면 비효율적, canvas.delete() 메서드로 
      이전에 그린 그래프를 지우고 새로 그릴 때도 tags를 이용하여 특정 그래프 요소만 삭제하도록 최적화
      -> self.canvas_inside_large.delete("volt_graph")  # 전압 그래프만 삭제
   4: Canvas 업데이트 개선 -> 각 데이터 포인트를 하나씩 그리기보다, 특정 영역을 업데이트하거나 canvas.create_line()을 최소한으로 호출하여 성능을 향상
      대신 draw_volt()에서 각각의 선을 그릴 때, 최대한 효율적으로 처리하는 것이 중요
   5: 시리얼 통신 병목 해결 -> ser = serial.Serial('/dev/ttyTHS1', 115200, timeout=0.1)  # timeout 값을 0.1로 설정 / 1 -> 0.1
   6: 멀티스레딩 -> 그래프 그리는 작업과 시리얼 데이터를 읽는 작업을 분리하면 UI가 더 빠르고 부드럽게 업데이트될 수 있음,
      하나의 스레드는 시리얼 데이터를 처리하고 다른 스레드는 그래프를 그리는 작업을 처리하게 하여, UI 업데이트가 시리얼 통신의 지연에 의존하지 않도록 하기


─────────────────────────────────────────────────────────


1. 1002 15차 수정 및 문제 (코드 1002_SAD_Display.py, 1002_SAD_test_pc.py, pico_HIGH_LOW.c)
-> 기존 작성한 코드는 pico에게 1값을 보내어 LED를 키우게 하는 ARM_1 버튼이 눌리지 않은 문제로 코드를 전면 수정함
-> 1280x800에 맞춰 UI 창 개선 -> 1220x740
-> DIAR 버튼 커버이미지 제거
-> ARM_1 버튼을 누를 시 pico에 1 값 전송, pico는 1 값을 받아와 LED 불 켜기 수정 완료, pico 코드 추가
-> 이미지 버튼, 신호 그래프, DIAR 버튼, ADC 그래프에 대한 기능들을 각 클래스 별로 나눔 메인 코드에는 GUI와 Quick, Delay 버튼만 남겨놓음
-> ARM_2의 신호 그래프에 텍스트 라벨은 LOW, HIGH 잘 출력되는데 ARM_1은 LOW에서 HIGH로 텍스트가 바뀌지 않는 문제

※ SAD ui Display에서 ARM 1 버튼 눌러 on 할 시 값 전달(예시.  off -> 0, on -> 1) -> 젯슨 -> (시리얼 통신) -> pico 
※ pico와 연결(통신?) 되어 있는 다른 MCU에 ARM1 에 대한 HIGH LOW 신호 전달
※ pico 에서 ARM 1, 2, 3 에 대한 핀은 아무거나 (예시. ARM 1 -> pin 6)

# 지금은 MCU에 신호 보내는 것보다 LED를 키는 걸로 테스트 할 것
-> 기존 코드 0930_SAD_Display.py에서 테스트 해봤는데 버튼이 눌리지 않음 pico led에 불 안들어옴
-> 새로 작성한 1002_SAD_Display.py 코드를 사용할 것

2. 코드 개선
   A. ADC voltage 값이 얼마인지 출력해주는 텍스트 라벨에 소수점 수정 해줘야 함
   B. ARM_3 신호에 대한 HIGH, LOW 텍스트 라벨을 추가 해줘야 하는데 현재 quick_data = [0, 1], delay_data = [0, 0, 1, 1]가 적용이 안되서
      HIGH, LOW 번갈아 나오지 않고 signal_value3의 값 1 = HIGH만 출력됨

3. 개선 후 추가해야 할 일
※ 현재 draw_volt() 그래프가 시리얼 플로터 처럼 나오지 않음 이유 -> time 값을 1000 = 1초 로 주어서 1초마다 업데이트 해놨음


─────────────────────────────────────────────────────────


1. 1004 16차 수정 및 문제 (코드 1004_SAD_Display.py, 1004_SAD_test_pc.py, pico_HIGH_LOW.c)
-> ARM_2의 신호 그래프에 텍스트 라벨은 LOW, HIGH 잘 출력되는데 ARM_1은 LOW에서 HIGH로 텍스트가 바뀌지 않는 문제 수정완
-> 

※ SAD ui Display에서 ARM 1 버튼 눌러 on 할 시 값 전달(예시.  off -> 0, on -> 1) -> 젯슨 -> (시리얼 통신) -> pico 
※ pico와 연결(통신?) 되어 있는 다른 MCU에 ARM1 에 대한 HIGH LOW 신호 전달
※ pico 에서 ARM 1, 2, 3 에 대한 핀은 아무거나 (예시. ARM 1 -> pin 6)

# 지금은 MCU에 신호 보내는 것보다 LED를 키는 걸로 테스트 할 것

2. 코드 개선
   A. ADC voltage 값이 얼마인지 출력해주는 텍스트 라벨에 소수점 수정 해줘야 함
   B. ARM_3 신호에 대한 HIGH, LOW 텍스트 라벨을 추가 해줘야 하는데 현재 quick_data = [0, 1], delay_data = [0, 0, 1, 1]가 적용이 안되서
      HIGH, LOW 번갈아 나오지 않고 signal_value3의 값 1 = HIGH만 출력됨

3. 개선 후 추가해야 할 일
※ 현재 draw_volt() 그래프가 시리얼 플로터 처럼 나오지 않음 이유 -> time 값을 1000 = 1초 로 주어서 1초마다 업데이트 해놨음


─────────────────────────────────────────────────────────


1. 1007 17차 수정 및 문제 (코드 1007_SAD_Display.py, 1007_SAD_test_pc.py, pico_HIGH_LOW.c)
-> 현재 코드 정상적으로 실행이 되지만 추후 발생 할 수 있는 잠재적인 문제점이 있음
-> 시리얼 통신 예외 처리 부족, 다중 스레드 미사용(시리얼 데이터 읽기 중 통신 지연, 응답 지연등으로 GUI가 멈출 수 있음 ), 변수 상태 동기화 문제(ARM), 메모리 누수 위험, 버튼 상태 반영 지연(reset_all() 메서드)
-> 시리얼 통신 예외 처리 추가
-> 다중 스레드 사용 (이전 클래스 코드에서 사용한 것보다 느리긴 하나 강제 종료, 멈춤 현상은 없을 것임)
-> 위 잠재적 문제들을 해결하는 도중에 문제 발생 모든 버튼들을 순차적으로 on하고 마지막으로 DIAR 버튼을 눌러 on 하면 모든 버튼 및 신호 그래프를 초기화 하여야 하는데 버튼과 텍스트 라벨들은 
초기화가 되나 신호를 그리는 선은 0 (LOW) 값으로 초기화 되지 않고 1 (HIGH) 값을 유지한 채로 선을 그리고 있음

※ SAD ui Display에서 ARM 1 버튼 눌러 on 할 시 값 전달(예시.  off -> 0, on -> 1) -> 젯슨 -> (시리얼 통신) -> pico 
※ pico와 연결(통신?) 되어 있는 다른 MCU에 ARM1 에 대한 HIGH LOW 신호 전달
※ pico 에서 ARM 1, 2, 3 에 대한 핀은 아무거나 (예시. ARM 1 -> pin 6)

# 지금은 MCU에 신호 보내는 것보다 LED를 키는 걸로 테스트 할 것

2. 코드 개선
   A. ADC voltage 값이 얼마인지 출력해주는 텍스트 라벨에 소수점 수정 해줘야 함
   B. ARM_3 신호에 대한 HIGH, LOW 텍스트 라벨을 추가 해줘야 하는데 현재 quick_data = [0, 1], delay_data = [0, 0, 1, 1]가 적용이 안되서
      HIGH, LOW 번갈아 나오지 않고 signal_value3의 값 1 = HIGH만 출력됨

3. 개선 후 추가해야 할 일


─────────────────────────────────────────────────────────


1. 1008 18차 수정 및 문제 (코드 1008_SAD_Display.py, 1008_SAD_test_pc.py, pico_HIGH_LOW.c)
-> ADC voltage 값이 얼마인지 출력해주는 텍스트 라벨에 소수점 두 자릿수 까지 출력되도록 수정
-> 버튼 UI 와 버튼 기능을 클래스로 한번 더 나눔
-> 현재 코드 정상적으로 실행이 되지만 추후 발생 할 수 있는 잠재적인 문제점이 있음
-> 위 잠재적 문제들을 해결하는 도중에 문제 발생 신호 그래프 초기화 (HIGH→LOW) 에서 텍스트 라벨은 'LOW'로 업데이트가 
되지만 신호를 그리는 그래프의 선은 '0' 값으로 그리지 않고 '1'값으로 그려지고 있음 수정 완
-> 변수 상태 동기화 문제(ARM), 버튼 상태 반영 지연(reset_all() 메서드)

※ SAD ui Display에서 ARM 1 버튼 눌러 on 할 시 값 전달(예시.  off -> 0, on -> 1) -> 젯슨 -> (시리얼 통신) -> pico 
※ pico와 연결(통신?) 되어 있는 다른 MCU에 ARM1 에 대한 HIGH LOW 신호 전달
※ pico 에서 ARM 1, 2, 3 에 대한 핀은 아무거나 (예시. ARM 1 -> pin 6)

# 지금은 MCU에 신호 보내는 것보다 pico에 LED를 키는 걸로 테스트 할 것

2. 코드 개선
   A. ARM_3 신호에 대한 HIGH, LOW 텍스트 라벨을 추가 해줘야 하는데 현재 quick_data = [0, 1], delay_data = [0, 0, 1, 1]가 적용이 안되서
      HIGH, LOW 번갈아 나오지 않고 signal_value3의 값 1 = HIGH만 출력됨

3. 개선 후 추가해야 할 일


─────────────────────────────────────────────────────────


1. 1010 19차 수정 및 문제 (코드 1010_SAD_Display.py, 1010_SAD_test_pc.py, pico_HIGH_LOW.c)
-> 현재 코드 정상적으로 실행이 되지만 추후 발생 할 수 있는 잠재적인 문제점이 있음
-> 변수 상태 동기화 문제(ARM), 버튼 상태 반영 지연(reset_all() 메서드)

※ SAD ui Display에서 ARM 1 버튼 눌러 on 할 시 값 전달(예시.  off -> 0, on -> 1) -> 젯슨 -> (시리얼 통신) -> pico 
※ pico와 연결(통신?) 되어 있는 다른 MCU에 ARM1 에 대한 HIGH LOW 신호 전달
※ pico 에서 ARM 1, 2, 3 에 대한 핀은 아무거나 (예시. ARM 1 -> pin 6)

# 지금은 MCU에 신호 보내는 것보다 pico에 LED를 키는 걸로 테스트 할 것

2. 코드 개선
   A. ARM_3 신호에 대한 HIGH, LOW 텍스트 라벨을 추가 해줘야 하는데 현재 quick_data = [0, 1], delay_data = [0, 0, 1, 1]가 적용이 안되서
      HIGH, LOW 번갈아 나오지 않고 signal_value3의 값 1 = HIGH만 출력됨

3. 개선 후 추가해야 할 일


─────────────────────────────────────────────────────────


1. 1011 20차 수정 및 문제 (코드 1011_SAD_Display.py, 1011_SAD_test_pc.py, pico_HIGH_LOW.c)
-> 현재 코드 정상적으로 실행이 되지만 추후 발생 할 수 있는 잠재적인 문제점이 있음
-> 변수 상태 동기화 문제(ARM), 버튼 상태 반영 지연(reset_all() 메서드)
-> 현재 개선 작업 진행 중 SAD_Improvements.py

※ SAD ui Display에서 ARM 1 버튼 눌러 on 할 시 값 전달(예시.  off -> 0, on -> 1) -> 젯슨 -> (시리얼 통신) -> pico 
※ pico와 연결(통신?) 되어 있는 다른 MCU에 ARM1 에 대한 HIGH LOW 신호 전달
※ pico 에서 ARM 1, 2, 3 에 대한 핀은 아무거나 (예시. ARM 1 -> pin 6)

# 지금은 MCU에 신호 보내는 것보다 pico에 LED를 키는 걸로 테스트 할 것

2. 코드 개선
   A. ARM_3 신호에 대한 HIGH, LOW 텍스트 라벨을 추가 해줘야 하는데 현재 quick_data = [0, 1], delay_data = [0, 0, 1, 1]가 적용이 안되서
      HIGH, LOW 번갈아 나오지 않고 signal_value3의 값 1 = HIGH만 출력됨

3. 개선 후 추가해야 할 일


─────────────────────────────────────────────────────────


1. 1015 21차 수정 및 문제 (코드 1015_SAD_Display.py, 1015_SAD_test_pc.py, pico_HIGH_LOW.c)
-> 현재 코드 정상적으로 실행이 되지만 추후 발생 할 수 있는 잠재적인 문제점이 있음
-> 변수 상태 동기화 문제(ARM), 버튼 상태 반영 지연(reset_all() 메서드)
-> 현재 개선 작업 진행 중 SAD_Improvements.py
-> pico 코드 및 버튼에 따라 기능 추가 해야함 


2. 코드 개선
   A. ARM_3 신호에 대한 HIGH, LOW 텍스트 라벨을 추가 해줘야 하는데 현재 quick_data = [0, 1], delay_data = [0, 0, 1, 1]가 적용이 안되서
      HIGH, LOW 번갈아 나오지 않고 signal_value3의 값 1 = HIGH만 출력됨


3. 개선 후 추가해야 할 일

※ SAD ui Display에서 ARM 1 버튼 눌러 on 할 시 값 전달(예시.  off -> 0, on -> 1) -> 젯슨 -> (시리얼 통신) -> pico 
   pico와 연결(통신?) 되어 있는 다른 MCU에 ARM1 에 대한 HIGH LOW 신호 전달
   pico 에서 ARM 1, 2, 3 에 대한 핀은 아무거나 (예시. ARM 1 -> pin 6)
=> 지금은 MCU에 신호 보내는 것보다 pico에 LED를 키는 걸로 테스트 할 것

- Pico에서 MCU로 3개 채널로 ARM1, 2, 3, DISARM, FIRE 명령주는 것으로 구현(MNQ 신호를 거꾸로 했다고 생각)하고,
- Pico에서 MCU로 3개의 채널을 통해 ARM1, ARM2, ARM3, DISARM, FIRE 명령을 보내도록 설계

- MCU에서 ARM 1, 2, 3, DISARM, FIRE 출력을 내주는데, 포트는 추후 정의해주겠음. 임시로 구현만 할 것.
-> ARM 1, 2, 3, DISARM, FIRE 명령에 대한 출력을 내보냄, 구체적인 포트는 나중에 정의되겠지만, 지금은 일단 임시로 구현만

※ 코드 오류로 인해 솔레노이드 박힌 상태로 모터 돌리면 고장나니까 사전 코드검증 후 구현 필요

 ARM 1 인가되면 솔레노이드 구속해제하고(500ms 동안 해제), 구속해제 100ms 후 모터 회전신호 인가하기.

 당장에 ARM 2, 3 인가상황에서 모터의 역할은 없다고 가정, DISARM 인가 시에도 솔레노이드 구속해제 직후 모터 회전(ARM1의 역방향)


─────────────────────────────────────────────────────────


1. 1106 22차 수정 및 문제 (코드 1106_SAD_Display.py, 1106_SAD_test_pc.py, pico_HIGH_LOW.c)
-> timestamp를 급하게 추가해서 실제 Display를 실행하면 끊기는 문제 있음, test 실행 시에는 시리얼 통신이 없어서 timestamp가 끊기지 않음
-> 현재 코드 정상적으로 실행이 되지만 추후 발생 할 수 있는 잠재적인 문제점이 있음
-> 변수 상태 동기화 문제(ARM), 버튼 상태 반영 지연(reset_all() 메서드)
-> 현재 개선 작업 진행 중 SAD_Improvements.py
-> pico 코드 및 버튼에 따라 기능 추가 해야함


2. 코드 개선
   A. ARM_3 신호에 대한 HIGH, LOW 텍스트 라벨을 추가 해줘야 하는데 현재 quick_data = [0, 1], delay_data = [0, 0, 1, 1]가 적용이 안되서
      HIGH, LOW 번갈아 나오지 않고 signal_value3의 값 1 = HIGH만 출력됨


3. 개선 후 추가해야 할 일

※ SAD ui Display에서 ARM 1 버튼 눌러 on 할 시 값 전달(예시.  off -> 0, on -> 1) -> 젯슨 -> (시리얼 통신) -> pico 
   pico와 연결(통신?) 되어 있는 다른 MCU에 ARM1 에 대한 HIGH LOW 신호 전달
   pico 에서 ARM 1, 2, 3 에 대한 핀은 아무거나 (예시. ARM 1 -> pin 6)
=> 지금은 MCU에 신호 보내는 것보다 pico에 LED를 키는 걸로 테스트 할 것

- Pico에서 MCU로 3개 채널로 ARM1, 2, 3, DISARM, FIRE 명령주는 것으로 구현(MNQ 신호를 거꾸로 했다고 생각)하고,
- Pico에서 MCU로 3개의 채널을 통해 ARM1, ARM2, ARM3, DISARM, FIRE 명령을 보내도록 설계

- MCU에서 ARM 1, 2, 3, DISARM, FIRE 출력을 내주는데, 포트는 추후 정의해주겠음. 임시로 구현만 할 것.
-> ARM 1, 2, 3, DISARM, FIRE 명령에 대한 출력을 내보냄, 구체적인 포트는 나중에 정의되겠지만, 지금은 일단 임시로 구현만

※ 코드 오류로 인해 솔레노이드 박힌 상태로 모터 돌리면 고장나니까 사전 코드검증 후 구현 필요

 ARM 1 인가되면 솔레노이드 구속해제하고(500ms 동안 해제), 구속해제 100ms 후 모터 회전신호 인가하기.

 당장에 ARM 2, 3 인가상황에서 모터의 역할은 없다고 가정, DISARM 인가 시에도 솔레노이드 구속해제 직후 모터 회전(ARM1의 역방향)


─────────────────────────────────────────────────────────


1. 1108 23차 수정 및 문제 (코드 1108_SAD_Display.py, 1108_SAD_test_pc.py, pico_HIGH_LOW.c)
-> pico 코드 및 버튼에 따라 기능 추가 가능
-> 코드 전체 수정 완료
-> 향 후 문제가 될 점들은 모두 개선 했으나 예기치 않은 오류 발생 시 수정 필요성 有
-> 피코와 빠른 통신을 위해 피코 및 코드에 보드레이트 값은 921600으로 수정, 다만 이로 인해 실행할 때 마다 피코는 연결이 되는데 값을 못받거나 못 주는 경우 있음


2. 코드 개선
   A. ARM_3 신호에 대한 HIGH, LOW 텍스트 라벨을 추가 해줘야 하는데 현재 quick_data = [0, 1], delay_data = [0, 0, 1, 1]가 적용이 안되서
      HIGH, LOW 번갈아 나오지 않고 signal_value3의 값 1 = HIGH만 출력됨
      -> 이 부분에 대해서는 보류


3. 개선 후 추가해야 할 일

※ SAD ui Display에서 ARM 1 버튼 눌러 on 할 시 값 전달(예시.  off -> 0, on -> 1) -> 젯슨 -> (시리얼 통신) -> pico 
   pico와 연결(통신?) 되어 있는 다른 MCU에 ARM1 에 대한 HIGH LOW 신호 전달
   pico 에서 ARM 1, 2, 3 에 대한 핀은 아무거나 (예시. ARM 1 -> pin 6)
=> 지금은 MCU에 신호 보내는 것보다 pico에 LED를 키는 걸로 테스트 할 것

- Pico에서 MCU로 3개 채널로 ARM1, 2, 3, DISARM, FIRE 명령주는 것으로 구현(MNQ 신호를 거꾸로 했다고 생각)하고,
- Pico에서 MCU로 3개의 채널을 통해 ARM1, ARM2, ARM3, DISARM, FIRE 명령을 보내도록 설계

- MCU에서 ARM 1, 2, 3, DISARM, FIRE 출력을 내주는데, 포트는 추후 정의해주겠음. 임시로 구현만 할 것.
-> ARM 1, 2, 3, DISARM, FIRE 명령에 대한 출력을 내보냄, 구체적인 포트는 나중에 정의되겠지만, 지금은 일단 임시로 구현만


───────────────────────────────────────────────────────── 코딩 궁금점 ─────────────────────────────────────────────────────────

-
